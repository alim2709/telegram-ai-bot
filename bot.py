import os
import logging
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from openai import AsyncOpenAI

from repository import get_all_candles, get_candles_by_tag

load_dotenv()

logging.basicConfig(level=logging.INFO)

client = AsyncOpenAI(
    api_key=os.getenv("OPENAI_API_KEY2"),
    base_url="https://openrouter.ai/api/v1",
    default_headers={
        "HTTP-Referer": "https://t.me/scenty_bot",
        "X-Title": "Scenty Aroma Assistant",
    },
)


BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)


def get_main_menu():
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [
                KeyboardButton(text="üßò –ü–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"),
                KeyboardButton(text="üéÅ –ù–∞ –ø–æ–¥–∞—Ä–æ–∫"),
            ],
            [
                KeyboardButton(text="üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥"),
                KeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"),
            ],
        ],
    )


def get_mood_menu():
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [
                KeyboardButton(text="–£—Å—Ç–∞–ª(–∞), —Ö–æ—á—É —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è"),
                KeyboardButton(text="–•–æ—á–µ—Ç—Å—è —É—é—Ç–∞ –∏ —Ç–µ–ø–ª–∞"),
            ],
            [
                KeyboardButton(text="–í –ø–æ–∏—Å–∫–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è"),
                KeyboardButton(text="–•–æ—á—É —Ä–æ–º–∞–Ω—Ç–∏–∫–∏"),
            ],
            [
                KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ —Ö–æ—á—É —á—Ç–æ-—Ç–æ –∫—Ä–∞—Å–∏–≤–æ–µ"),
                KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
            ],
        ],
    )


def get_gift_menu():
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥—Ä—É–≥–∞"), KeyboardButton(text="–ú–∞–º–∞")],
            [KeyboardButton(text="–ö–æ–ª–ª–µ–≥–∞"), KeyboardButton(text="–°–µ–±–µ üéÅ")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ],
    )


@router.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Scenty ‚Äî —Ç–≤–æ–π –∞—Ä–æ–º–∞—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ‚ú®\n"
        "–ü–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å —Å–≤–µ—á—É –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫.\n\n"
        "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?",
        reply_markup=get_main_menu(),
    )


@router.message(lambda msg: msg.text == "üßò –ü–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
async def mood_handler(message: types.Message):
    await message.answer(
        "–ö–∞–∫ —Ç—ã —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è —á—É–≤—Å—Ç–≤—É–µ—à—å?", reply_markup=get_mood_menu()
    )


@router.message(
    lambda msg: msg.text
    in [
        "–£—Å—Ç–∞–ª(–∞), —Ö–æ—á—É —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è",
        "–•–æ—á–µ—Ç—Å—è —É—é—Ç–∞ –∏ —Ç–µ–ø–ª–∞",
        "–í –ø–æ–∏—Å–∫–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è",
        "–•–æ—á—É —Ä–æ–º–∞–Ω—Ç–∏–∫–∏",
        "–ü—Ä–æ—Å—Ç–æ —Ö–æ—á—É —á—Ç–æ-—Ç–æ –∫—Ä–∞—Å–∏–≤–æ–µ",
    ]
)
async def mood_result(message: types.Message):
    mood_to_tag = {
        "–£—Å—Ç–∞–ª(–∞), —Ö–æ—á—É —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è": "—Ä–µ–ª–∞–∫—Å",
        "–•–æ—á–µ—Ç—Å—è —É—é—Ç–∞ –∏ —Ç–µ–ø–ª–∞": "—É—é—Ç",
        "–í –ø–æ–∏—Å–∫–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è": "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
        "–•–æ—á—É —Ä–æ–º–∞–Ω—Ç–∏–∫–∏": "—Ä–æ–º–∞–Ω—Ç–∏–∫–∞",
        "–ü—Ä–æ—Å—Ç–æ —Ö–æ—á—É —á—Ç–æ-—Ç–æ –∫—Ä–∞—Å–∏–≤–æ–µ": "–∫—Ä–∞—Å–æ—Ç–∞",
    }
    tag = mood_to_tag.get(message.text)
    reply = await recommend_by_tag(message.text, tag)
    await message.answer(reply)


@router.message(lambda msg: msg.text == "üéÅ –ù–∞ –ø–æ–¥–∞—Ä–æ–∫")
async def gift_handler(message: types.Message):
    await message.answer("–î–ª—è –∫–æ–≥–æ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫?", reply_markup=get_gift_menu())


@router.message(lambda msg: msg.text in ["–ü–æ–¥—Ä—É–≥–∞", "–ú–∞–º–∞", "–ö–æ–ª–ª–µ–≥–∞", "–°–µ–±–µ üéÅ"])
async def gift_result(message: types.Message):
    gift_to_tag = {
        "–ü–æ–¥—Ä—É–≥–∞": "–ø–æ–¥—Ä—É–≥–∞",
        "–ú–∞–º–∞": "–º–∞–º–∞",
        "–ö–æ–ª–ª–µ–≥–∞": "–∫–æ–ª–ª–µ–≥–∞",
        "–°–µ–±–µ üéÅ": "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π",
    }
    tag = gift_to_tag.get(message.text)
    reply = await recommend_by_tag(message.text, tag)
    await message.answer(reply)


@router.message(lambda msg: msg.text == "üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥")
async def catalog_handler(message: types.Message):
    await message.answer(
        "–í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥: https://example.com/catalog\n–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –Ω–æ–≤–∏–Ω–æ–∫!"
    )


@router.message(lambda msg: msg.text == "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def faq_handler(message: types.Message):
    await message.answer(
        "üìå –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        "1. –°–æ—Å—Ç–∞–≤ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –≤–æ—Å–∫, –±–µ–∑ –ø–∞—Ä–∞—Ñ–∏–Ω–∞.\n"
        "2. –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –ø–æ –≤—Å–µ–π –ï–≤—Ä–æ–ø–µ.\n"
        "3. –û–ø–ª–∞—Ç–∞ ‚Äî –∫–∞—Ä—Ç–æ–π –∏–ª–∏ PayPal.\n"
        "4. –í–æ–∑–≤—Ä–∞—Ç—ã ‚Äî –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π."
    )


@router.message(lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message):
    await message.answer("–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?", reply_markup=get_main_menu())


@router.message()
async def handle_ai_query(message: types.Message):
    user_msg = message.text
    reply = await get_aroma_recommendation(user_msg)
    await message.answer(reply)


async def build_prompt_by_tag(tag: str, user_message: str) -> str:
    candles = await get_candles_by_tag(tag)
    if not candles:
        return f"–í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {tag} üòî"

    prompt = "–í–æ—Ç —Å–≤–µ—á–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n"
    for c in candles:
        prompt += f"- {c.title} ‚Äî {c.notes}. {c.description or ''}\n"

    full_prompt = (
        f"{prompt}\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ 1 —Å–≤–µ—á—É, –∫–æ—Ç–æ—Ä–∞—è –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥—ë—Ç. "
        "–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Å–∏–≤–æ, –∫–æ—Ä–æ—Ç–∫–æ (–¥–æ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π), —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–µ—á–∏ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã, –∫–æ—Ç–æ—Ä—É—é –æ–Ω–∞ —Å–æ–∑–¥–∞—ë—Ç."
    )
    return full_prompt


async def build_catalog_prompt():
    candles = await get_all_candles()
    if not candles:
        return "–ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∞—Ä–æ–º–∞—Ç–∞–º–∏ ‚ú®"

    prompt = "–í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ –∞—Ä–æ–º–∞—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π:\n"
    for candle in candles:
        prompt += f"- {candle.title} ‚Äî {candle.notes}. {candle.description or ''}\n"
    return prompt


async def recommend_by_tag(user_message: str, tag: str) -> str:
    try:
        prompt = await build_prompt_by_tag(tag, user_message)
        response = await client.chat.completions.create(
            model="openai/gpt-4-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –∞—Ä–æ–º–∞—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —Å—Ç–∏–ª—å–Ω–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—Ç–∏.",
                },
                {"role": "user", "content": prompt},
            ],
            temperature=0.85,
            max_tokens=200,
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"[AI ERROR]: {e}")
        return "–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–≤–µ—á—É, –Ω–æ —Å–∫–æ—Ä–æ –≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏–º üåô"


async def get_aroma_recommendation(user_message: str) -> str:
    try:
        catalog_prompt = await build_catalog_prompt()

        response = await client.chat.completions.create(
            model="openai/gpt-4-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã —Å—Ç–∏–ª—å–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Ä–æ–º–∞—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. "
                        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å–≤–µ—á—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—è—Å—å –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                        "–ì–æ–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ, –∫—Ä–∞—Å–∏–≤–æ –∏ –ø–æ –¥–µ–ª—É. –ù–µ –æ–±—ä—è—Å–Ω—è–π, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥. "
                        "–û—Ç–≤–µ—Ç ‚Äî –Ω–µ –±–æ–ª–µ–µ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –£–ø–æ–º—è–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–µ—á–∏ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –∫–æ—Ç–æ—Ä—É—é –æ–Ω–∞ —Å–æ–∑–¥–∞—ë—Ç."
                    ),
                },
                {
                    "role": "user",
                    "content": f"{catalog_prompt}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}",
                },
            ],
            temperature=0.85,
            max_tokens=200,
        )

        if (
            response.choices
            and response.choices[0].message
            and response.choices[0].message.content
        ):
            return response.choices[0].message.content.strip()
        else:
            print(f"[AI WARNING]: Empty response content: {response}")
            return "–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞—Ä–æ–º–∞—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ üåô"
    except Exception as e:
        print(f"[AI ERROR]: {e}")
        return "–°–µ–≥–æ–¥–Ω—è –∞—Ä–æ–º–∞—Ç –≤ –ø—É—Ç–∏, –Ω–æ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–±–µ—Ä—É –µ–≥–æ –¥–ª—è —Ç–µ–±—è –ø–æ–∑–∂–µ üåô"


# Launch bot
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
